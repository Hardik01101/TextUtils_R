{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","togglemode","htmlfor","label","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","target","backgroundColor","toUpperCase","showAlert","toLowerCase","split","length","Alert","word","alert","role","charAt","slice","msg","defaultProps","App","setdark","setmode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.75743589.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">About</a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode} />\r\n            <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable {props.label} Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string }\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Title Here\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        setText(text.toUpperCase());\r\n        props.showAlert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n\r\n    const handlelowClick = () => {\r\n        setText(text.toLowerCase());\r\n        props.showAlert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myform\" rows=\"8\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#212529' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handlelowClick}>Convert to Lowercase</button>\r\n            </div>\r\n\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h3>Your text summary</h3>\r\n                <p>{text.split(\" \").length} words {text.length} characters</p>\r\n                <p>{0.008 * (text.split(\" \").length)} minutes to read</p>\r\n                <h4>Preview</h4>\r\n                <p>{text.length>0?text:\"Enter something to preview.\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize_first=(word)=>{\r\n        const low=word.toLowerCase();\r\n        return low.charAt(0).toUpperCase()+word.slice(1);\r\n    }\r\n\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\r\n                <strong>{capitalize_first(props.alert.type)}: </strong>{props.alert.msg}\r\n            </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from \"./components/Navbar\"\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setdark] = useState('light');\n  const [label, setmode] = useState('Dark');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const togglemode = () => {\n    if (mode === 'light') {\n      setdark('dark');\n      setmode('Light');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode enabled\", \"success\");\n      document.title = 'TextUtils Dark';\n    }\n    else {\n      setdark('light');\n      setmode('Dark')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode enabled\", \"success\");\n      document.title = 'TextUtils Light';\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode} label={label} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route> */}\n\n          {/* <Route> */}\n            <TextForm heading=\"Enter text below\" mode={mode} showAlert={showAlert} />\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}